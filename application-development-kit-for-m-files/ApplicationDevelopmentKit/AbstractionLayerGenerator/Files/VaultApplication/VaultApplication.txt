//------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

using MFiles.VAF;
using MFiles.VAF.Common;
using MFilesAPI;

namespace ?namespace
{
	public class object_events
	{
		public Dictionary<int, object> object_lookup = null;
		public Dictionary<int, object> property_lookup = null;
		public Dictionary<MFEventHandlerType, Dictionary<int, List<MethodInfo>>> event_object_methods = null;
		public Dictionary<MFEventHandlerType, Dictionary<int, List<MethodInfo>>> event_property_methods = null;
		private Dictionary<Type, List<MethodInfo>> obj_methods = null;
		private Dictionary<string, MFEventHandlerType> event_lookup = null;

		public object_events()
		{
			init();
		}
		public void init()
		{
			object_lookup = new Dictionary<int, object>();
			property_lookup = new Dictionary<int, object>();
			event_object_methods = new Dictionary<MFEventHandlerType, Dictionary<int, List<MethodInfo>>>();
			event_property_methods = new Dictionary<MFEventHandlerType, Dictionary<int, List<MethodInfo>>>();
			obj_methods = Assembly
				.GetExecutingAssembly()
				.GetTypes()
				.SelectMany(t => t.GetRuntimeMethods())
				.Where(m => m.GetCustomAttributes(typeof(IMFEvent), false).Length > 0)
				.GroupBy(m => m.DeclaringType)
				.ToDictionary(m => m.Key, m => m.ToList());

			event_lookup = Enum
				.GetValues(typeof(MFEventHandlerType))
				.Cast<MFEventHandlerType>()
				.ToDictionary(t => t.ToString(), t => t);

			foreach (KeyValuePair<Type, List<MethodInfo>> obj in obj_methods) {
				if (obj.Key?.BaseType.Name.Length < 3)
					continue;

				string data_type = obj.Key?.BaseType.Name.Substring(0, 3);
				switch (data_type) {
				case "OT_":
					set_event_methods("TypeID", obj, object_lookup, event_object_methods);
					break;
				case "PD_":
					set_event_methods("id", obj, property_lookup, event_property_methods);
					break;
				}
			}
		}
		public void set_event_methods(
			string field,
			KeyValuePair<Type, List<MethodInfo>> obj,
			Dictionary<int, object> lookups,
			Dictionary<MFEventHandlerType, Dictionary<int, List<MethodInfo>>> event_methods)
		{
			object objval;
			int object_value;
			string attribute_event_handler_name;
			FieldInfo objfi;
			MFEventHandlerType mf_event_type;

			objfi = obj.Key.BaseType.GetField(field);
			objval = objfi?.GetValue(obj.Key.BaseType);
			if (objfi == null || objval == null || objfi.FieldType != typeof(int))
				return;

			object_value = Convert.ToInt32(objval);
			if (!lookups.ContainsKey(object_value))
				lookups.Add(object_value, Activator.CreateInstance(obj.Key));

			foreach (MethodInfo m in obj.Value) {
				foreach (CustomAttributeData customer_mf_event_attr in m.CustomAttributes) {
					attribute_event_handler_name = customer_mf_event_attr?.AttributeType.Name;

					if (!event_lookup.ContainsKey(attribute_event_handler_name))
						continue;

					mf_event_type = event_lookup[attribute_event_handler_name];
					if (!event_methods.ContainsKey(mf_event_type))
						event_methods.Add(mf_event_type, new Dictionary<int, List<MethodInfo>>());
					if (!event_methods[mf_event_type].ContainsKey(object_value))
						event_methods[mf_event_type].Add(object_value, new List<MethodInfo>());
					if (!event_methods[mf_event_type][object_value].Contains(m))
						event_methods[mf_event_type][object_value].Add(m);
				}
			}
		}
	}
	public class VaultApplication : VaultApplicationBase
	{
		private static object_events _e = null;
		public static Dictionary<int, List<int>> Deleting_Objects;
		public delegate void EventHandler();

		public static object_events e {
			get {
				if (_e == null)
					_e = new object_events();
				else if (_e.property_lookup == null
							|| _e.object_lookup == null
							|| _e.event_property_methods == null
							|| _e.event_object_methods == null)
					_e.init();
				return _e;
			}
		}

		protected override void StartApplication()
		{
			_e = new object_events();
		}

		?mfEventHandlerTypes
		public void ProcessRequest(EventHandlerEnvironment env)
		{
			MFEventHandlerType etype = env.EventType;

			if (!e.event_object_methods.ContainsKey(etype) && !e.event_property_methods.ContainsKey(etype))
				return;
			bool isBeforeCheckinOrBeforeCreateNewEventType = MFEventHandlerType.MFEventHandlerBeforeCheckInChanges.Equals(etype)
				|| MFEventHandlerType.MFEventHandlerBeforeCheckInChangesFinalize.Equals(etype)
				|| MFEventHandlerType.MFEventHandlerBeforeCreateNewObjectFinalize.Equals(etype);

			bool event_processed = false;
			int type = env.ObjVer.Type;
			object obj;
			TypedValue LastModifiedBy;
			Dictionary<int, List<MethodInfo>> em = e.event_object_methods[etype];
			EventHandler eventHandler;

			// process object
			if (em.ContainsKey(type) && e.object_lookup.ContainsKey(type)) {
				obj = e.object_lookup[type];
				obj = Activator.CreateInstance(e.object_lookup[type].GetType());
				(obj as IObjVerEx).objVerEx = env.ObjVerEx;
				foreach (MethodInfo m in em[type]) {
					if (isBeforeCheckinOrBeforeCreateNewEventType && skip_vaf_calculation(env.ObjVerEx)) {
						event_processed = true;
						continue;
					}
					eventHandler = (EventHandler)Delegate.CreateDelegate(typeof(EventHandler), obj, m);
					eventHandler.Invoke();
					event_processed = true;
				}
			}

			// Todo: process property definition(s)
			//if (e.property_lookup.Count == 0)
			//	return;
			//foreach (PropertyValue pv in env.ObjVerEx.Properties) {
			//	type = pv.PropertyDef;
			//	if (!e.event_property_methods[etype].ContainsKey(type) || !e.property_lookup.ContainsKey(type))
			//		continue;

			//	pd = e.property_lookup[type];
			//	foreach (MethodInfo m in e.event_property_methods[etype][type]) {
			//		obj = m.Invoke(pd, null);
			//		env.ObjVerEx.SetProperty(type, (pd as IPropertyDefinition).getDataType(), obj);
			//		env.ObjVerEx.SaveProperties();
			//	}
			//}

			// save properties & set last modified by user
			if (!event_processed)
				return;

			if (isBeforeCheckinOrBeforeCreateNewEventType) {
				//get last modified value before saving
				PropertyValue last_modified_by = env.ObjVerEx.GetProperty(MFBuiltInPropertyDef.MFBuiltInPropertyDefLastModifiedBy);
				if (last_modified_by == null)
					last_modified_by = new PropertyValue();
				if (last_modified_by.TypedValue.IsNULL())
					last_modified_by.TypedValue.SetValue(MFDataType.MFDatatypeLookup, env.CurrentUserID);

				env.ObjVerEx.SaveProperties();
				env.Vault.ObjectPropertyOperations.SetLastModificationInfoAdmin(env.ObjVer, true, last_modified_by.TypedValue, false, null);
			}
		}

		private static bool skip_vaf_calculation(ObjVerEx objVerEx)
		{
			string SKIP_VAF_CALCULATIONS = "SKIP_VAF_CALCULATIONS";
			string key_words = objVerEx.GetPropertyText(26);
			if (string.IsNullOrWhiteSpace(key_words) || !key_words.Contains(SKIP_VAF_CALCULATIONS))
				return false;

			objVerEx.SetProperty(26, MFDataType.MFDatatypeText, key_words.Replace(SKIP_VAF_CALCULATIONS, "").Trim());
			return true;
		}
	}
}